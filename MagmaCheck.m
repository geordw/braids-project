SetColumns(0);
SetAssertions(3);
SetQuitOnError(true);
SetEchoInput(true);
//
// MagmaCheck.m: Verify that our claimed elements are really in the p=5 kernel.
//
// First set up the ring F5[v, v^-1] and the generators for the (3, 1) representation.

Q<v,w> := PolynomialRing(FiniteField(5), 2);
R<v,w> := quo<Q | v*w-1>; // so that w is v^(-1);

// Generators in slots 1, 2, 3, and generator inverses in slots -1, -2, -3.
mats := AssociativeArray();
mats[1] := Matrix(R, 3, 3, [-v^2, -v, 0, 0, 1, 0, 0, 0, 1]);
mats[2] := Matrix(R, 3, 3, [1, 0, 0, -v, -v^2, -v, 0, 0, 1]);
mats[3] := Matrix(R, 3, 3, [1, 0, 0, 0, 1, 0, 0, -v, -v^2]);
mats[-1] := w^2*Matrix(R, 3, 3, [-1, -v, 0, 0, v^2, 0, 0, 0, v^2]);
mats[-2] := w^2*Matrix(R, 3, 3, [v^2, 0, 0, -v, -1, -v, 0, 0, v^2]);
mats[-3] := w^2*Matrix(R, 3, 3, [v^2, 0, 0, 0, v^2, 0, 0, -v, -1]);

// Ensure oppositely signed pairs are inverse.
mats[1] * mats[-1];
mats[2] * mats[-2];
mats[3] * mats[-3];

// Check the braid relations.
mats[1] * mats[2] * mats[1] eq mats[2] * mats[1] * mats[2];
mats[2] * mats[3] * mats[2] eq mats[3] * mats[2] * mats[3];
mats[1] * mats[3] eq mats[3] * mats[1];

// Set up the relevant braid group.
B := BraidGroup(4);

// Enter all the braids of interest, as words in the Artin generators and their inverses.
braid_seqs :=
    [ [-1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 2, 1, 3, 2, 2, 1, 3, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1]
    , [-1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, 1, 2, 1, 3, 2, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 1, 2, 2, 1, 3, 1, 2, 2, 1, 3, 1, 3, 1, 2, 3, 2, 1, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 1, 2, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 2, 2, 1, 3, 1, 2, 2, 2, 1, 3, 2, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 1, 3, 2, 2, 2, 1, 3, 1]
    , [-1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, -1, -2, -3, -1, -2, -1, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 1, 2, 1, 3, 1, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2]
    ];

// For each braid, check that it is nontrivial in the braid group (by using its Garside length, i.e. CanonicalLength),
// and check that it is a kernel element.
for i -> braid_seq in braid_seqs do
    braid := NormalForm(B ! braid_seq);
    printf "Braid %o has Garside length %o and evaluates to\n%o\n"
        , i
        , CanonicalLength(braid)
        , &*[mats[w] : w in Eltseq(braid)]
        ;
end for;

quit;